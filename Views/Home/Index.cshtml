@model WebAppTemplate.Models.Product


@{
    ViewBag.Title = "Product List";
}

<main>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4><span class="fas fa-tags fs-6"></span> @ViewBag.Title <small>(view, add, edit)</small> </h4>
                </div>
                <div class="card-body">

                    <!-- js-level-filter -->
                    <div class="row mb-2" id="js-level-filter" style="display:none">
                        <div class="col-12">
                            <div class="btn-group" role="group" aria-label="status level filter">
                                <button type="button" class="btn btn-outline-primary" data-filter="1">Draft <span class="badge bg-secondary">0</span></button>
                                <button type="button" class="btn btn-outline-primary" data-filter="2">For Checking <span class="badge bg-warning">0</span></button>
                                <button type="button" class="btn btn-outline-primary" data-filter="3">Checked <span class="badge bg-warning">0</span></button>
                                <button type="button" class="btn btn-outline-primary" data-filter="9">Approved <span class="badge bg-success">0</span></button>
                                <button type="button" class="btn btn-outline-danger" data-filter="5">Cancelled/Deleted <span class="badge bg-danger">0</span></button>
                            </div>
                        </div>
                    </div>

                    <div class="btn-group" id="js-crud">
                        <button type="button" class="btn btn-icon icon-left btn-primary text-uppercase mb-3" onclick="showProductModal()"><span class="fas fa-plus-square"></span> Add New Record</button>
                        <button type="button" class="btn btn-icon icon-left btn-warning text-uppercase mb-3"><span class="fas fa-plus-square"></span> Reports </button>
                    </div>

                    <table class="table table-hover table-sm" id="ProductTable" style="width:100%">
                        <thead>
                            <tr class="bg-primary text-white text-uppercase">
                                <th>ID</th>
                                <th>PRODUCTNAME</th>
                                <th>PRODUCTDESCRIPTION</th>
                                <th>PRODUCTCATEGORY</th>
                                <th>PRODUCTCATEGORYDESCRIPTION</th>
                                <th>PRODUCTPRICE</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bg-opacity-75" id="ProductModal" role="dialog" data-bs-focus="false" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="ProductModalTitle" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-dark text-uppercase text-light p-3">
                    <h5 class="modal-title"> </h5>

                    <!-- js-level-update -->
                    <div class="btn-group btn-group-sm js-level-update" id="js-level-update" style="display:none">
                        <button id="" type="button" class="btn btn-danger" data-filter="backlevel" data-value="-1" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="bottom" title="Move back to previous status/level..."><span class="fas fa-arrow-circle-left"></span> Back to level</button>
                        <button id="" type="button" class="btn btn-warning" data-filter="movelevel" data-value="-1" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="bottom" title="Move or Submit For..."><span class="fas fa-arrow-circle-right"></span> Submit for checking</button>
                    </div>

                </div>
                <form id="ProductForm" autocomplete="off" dirty-checker>
                    <div class="modal-body">
                        <input type="hidden" id="id" name="id" value="-1">
                        <div class="mb-2">
                            @Html.LabelFor(m => m.ProductName, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.ProductName) })
                            @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            @Html.LabelFor(m => m.ProductDescription, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ProductDescription, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.ProductDescription) })
                            @Html.ValidationMessageFor(m => m.ProductDescription, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            @Html.LabelFor(m => m.ProductCategory, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ProductCategory, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.ProductCategory) })
                            @Html.ValidationMessageFor(m => m.ProductCategory, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            @Html.LabelFor(m => m.ProductCategoryDescription, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ProductCategoryDescription, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.ProductCategoryDescription) })
                            @Html.ValidationMessageFor(m => m.ProductCategoryDescription, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            @Html.LabelFor(m => m.ProductPrice, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ProductPrice, new { @type = "number", @class = "form-control", @Value = "0" })
                            @Html.ValidationMessageFor(m => m.ProductPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="btnSave_ProductModal" type="button" class="btn btn-success"><span class="far fa-thumbs-up"></span> SAVE</button>
                        <button id="btnClose_ProductModal" type="button" class="btn btn-danger" onclick="$('#ProductModal').modal('toggle')"><span class="far fa-thumbs-down"></span> CLOSE</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


</main>

@section css{
    <link href="~/Scripts/myscripts/status-level-filter/StatusLevelFilter.css" rel="stylesheet" />
}

@section scripts{
    <script src="~/Scripts/myscripts/status-level-filter/StatusLevelFilter.js"></script>

    <script>

        $(function () {
            // initailize action filter
            // initActionFilter()

            $('#ProductModal').on('shown.bs.modal', function () {

            }).on('hidden.bs.modal', function () {
                window._seldata = null;
                $('#ProductFormBody').attr('data-js', '');
                $('#ProductForm')[0].reset();
                $('#id').val('-1');
            });

            $('#btnSave_ProductModal').on('click', function () {
                saveProductForm()
            })

        })

        var dtProduct;
        var dtProductData;
        function reloadProductTable() {

            // check if initialized
            if (dtProduct == null) {
                initProductTable()
                return;
            }

            // else change url
            var q = {
                statuslvl: statuslevelfilter.active_filter
            }

            dtProduct.ajax.url("/product/LoadProducts?q=" + JSON.stringify(q)).load(function (json) {
                dtProductData = json.data
                // add other function to be called after table reloads
                dtProduct.columns.adjust();

                setTimeout(statuslevelfilter.updateBadgeCount(json.badgecount), 1); // update badge count
            }, false)

        }
        function initProductTable() {

            var q = {
                statuslvl: statuslevelfilter.active_filter
            }

            $('#ProductTable').DataTable().destroy();
            dtProduct = $('#ProductTable').DataTable({
                stateSave: true,
                ajax: {
                    "url": "/product/LoadProducts?q=" + JSON.stringify(q),
                    "type": "GET",
                    datatype: "json",
                    error: function (errormessage) {
                        toastError("Error!", "Failed to load datatable ...")
                    }
                },
                pageLength: 5,
                order: [[1, "asc"]], // index based
                lengthMenu: [
                    [5, 10, 30, 50, -1],
                    [" 5", 10, 30, 50, "All"]
                ],
                autoWidth: true,
                initComplete: function (settings, json) {
                    dtProductData = json.data;
                    document.body.style.cursor = 'default';

                    setTimeout(statuslevelfilter.updateBadgeCount(json.badgecount), 1); // update badge count
                },
                columns: [
                    // data: , name: , orderable: , autoWidth: , width: , className: 'text-center' , "visible":false
                    { "data": "id", "autoWidth": true },
                    { "data": "ProductName", "autoWidth": true },
                    { "data": "ProductDescription", "autoWidth": true },
                    { "data": "ProductCategory", "autoWidth": true },
                    { "data": "ProductCategoryDescription", "autoWidth": true },
                    { "data": "ProductPrice", "autoWidth": true }
                ],
                aoColumnDefs: [
                    {
                        "width": "90px",
                        "aTargets": [0], // target column
                        "bSortable": false,
                        "mRender": function (data, type, full, meta) {
                            return `<button class="btn btn-primary btn-sm btnRowEdit" style="font-size:smaller;" id="vw_${full.id}" data-id="${full.id}" onclick="showEditProductModal(${full.id})"> <span class="fas fa-edit"></span> VIEW</button> `;
                        },
                        "className": "text-center text-uppercase"
                    }
                ]

            });
        }

        function showProductModal() {
            $(".field-validation-error, .validation-summary-errors > ul").empty();
            $('#ProductForm')[0].reset();
            $('#id').val('-1');

            $('#ProductModal h5').text('ADD NEW DETAILS');
            $('#ProductModal').modal('show');

            // to update next level display
            statuslevelfilter.BuildMoveToButtons(0)
        }

        function showEditProductModal(id) {

            $.ajax({
                url: "/product/getbyid/?id=" + id,
                type: "GET",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (result, textStatus, jqXHR) {
                    if (result.data != null) {
                        fillProductForm(result.data);
                        $('#ProductModal h5').text('EDIT DETAILS');
                        $('#ProductModal').modal('show');
                        $('#ProductModal').find('form').data('isDirty', false);
                    } else {
                        swal("Error!", "There are no details to display.\n", "warning");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    swal("Error!", "Oops! something went wrong ... \n", "error");

                }
            });
        }

        function fillProductForm(js) {
            window._seldata = js;
            $('#id').val(js['id']);
            $('#id').closest('form').data('isDirty', false);
            $('#ProductName').val(js['ProductName']);
            $('#ProductDescription').val(js['ProductDescription']);
            $('#ProductCategory').val(js['ProductCategory']);
            $('#ProductCategoryDescription').val(js['ProductCategoryDescription']);
            $('#ProductPrice').val(js['ProductPrice']);

            // to update next level display
            statuslevelfilter.BuildMoveToButtons(js.statuslvl)
        }

        function saveProductForm() {

            var model = {
                id: _.toNumber($('#id').val()),
                ProductName: $('#ProductName').val(),
                ProductDescription: $('#ProductDescription').val(),
                ProductCategory: $('#ProductCategory').val(),
                ProductCategoryDescription: $('#ProductCategoryDescription').val(),
                ProductPrice: _.toNumber($('#ProductPrice').val())
            }

            $.ajax({
                url: "/product/upsert",
                data: JSON.stringify(model),
                type: "POST",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (response, textStatus, jqXHR) {
                    var msg;
                    if (response.result == null) {
                        msg = response.toLowerCase();
                    } else {
                        msg = response.result.toLowerCase();
                    }
                    if (msg.includes("success")) {
                        $('#ProductModal').find('form').data('isDirty', false);
                        $('#ProductModal').modal('hide');
                        reloadProductTable(); // or dtProductTable.ajax.reload(null,false)
                        swal("Saved!", "Record has been saved", "success");

                    } else if (msg.includes("nochange")) {
                        $('#ProductModal').find('form').data('isDirty', false);
                        $('#ProductModal').modal('hide');
                    } else {
                        swal("Error", "An error occured: " + msg + "\n", "warning");

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (jqXHR.status == 401) {
                        swal2({
                            title: `Unauthorized`,
                            html: 'It seems you have been logged out.<br><b>Please login and try again.</b>',
                            icon: 'error',
                            dangerMode: true,
                            showCancelButton: false,
                        }, () => {
                            window.location = "/Authentication/Logout";
                        });
                        return;
                    }
                    swal("Error!", "Oops! something went wrong ... \n", "error");
                }
            });


        }

        /** ----------------------------------- */

        function onMoveToLevelButtonClicked(sender) {
            var moveToId = $(sender)[0].dataset.value
            var moveToTitle = $(sender)[0].dataset.title

            swal2({
                title: `Update Status?`,
                html: `Are you sure you want to move and update the status to <b>${moveToTitle}</b>`,
                icon: 'warning',
                dangerMode: true,
            }, () => {
                updateProductStatus(window._seldata.id, moveToId)
            });

        }

        function updateProductStatus(id, newstatusid) {

            var model = {
                id: _.toNumber($('#id').val()),
                statusid: _.toNumber(newstatusid),
            }

            $.ajax({
                url: "/product/updatestatuslevel",
                data: JSON.stringify(model),
                type: "POST",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (response, textStatus, jqXHR) {
                    var msg;
                    if (response.result == null) {
                        msg = response.toLowerCase();
                    } else {
                        msg = response.result.toLowerCase();
                    }
                    if (msg.includes("success")) {
                        $('#ProductModal').find('form').data('isDirty', false);
                        $('#ProductModal').modal('hide');
                        reloadProductTable(); // or dtProductTable.ajax.reload(null,false)
                        swal("Saved!", "Record has been saved", "success");

                    } else if (msg.includes("nochange")) {
                        $('#ProductModal').find('form').data('isDirty', false);
                        $('#ProductModal').modal('hide');
                    } else {
                        swal("Error", "An error occured: " + msg + "\n", "warning");

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (jqXHR.status == 401) {
                        swal2({
                            title: `Unauthorized`,
                            html: 'It seems you have been logged out.<br><b>Please login and try again.</b>',
                            icon: 'error',
                            dangerMode: true,
                            showCancelButton: false,
                        }, () => {
                            window.location = "/Authentication/Logout";
                        });
                        return;
                    }
                    swal("Error!", "Oops! something went wrong ... \n", "error");
                }
            });


        }

        var statuslevelfilter = new StatusLevelFilter({
            parent_filter: $('#js-level-filter'),
            parent_statusbutton: $('#js-level-update'),
            // function to call after filter
            onLevelFilterClicked_Handler: reloadProductTable,
            // function to click on status update
            onMoveToLevelButtonClicked_Handler: onMoveToLevelButtonClicked,
            // default level id
            default_level: 1,
            // approval level
            approval_levels: [
                {
                    id: 1,
                    status: "Prepared",
                    name: "Prepare",
                    btnclass: `btn btn-outline-primary`,
                    badgeclass: `badge bg-primary`,
                    backclass: `btn btn-danger`,
                    moveclass: `btn btn-success`,
                },
                {
                    id: 2,
                    status: "For Checking",
                    name: "Submit",
                    btnclass: `btn btn-outline-primary`,
                    badgeclass: `badge bg-primary`,
                    backclass: `btn btn-danger`,
                    moveclass: `btn btn-success`,
                },
                {
                    id: 3,
                    status: "Endorsed",
                    name: "Endorse",
                    btnclass: `btn btn-outline-primary`,
                    badgeclass: `badge bg-primary`,
                    backclass: `btn btn-danger`,
                    moveclass: `btn btn-success`,
                },
                {
                    id: 9,
                    status: "Approved",
                    name: "Approve",
                    btnclass: `btn btn-outline-primary`,
                    badgeclass: `badge bg-primary`,
                    backclass: `btn btn-danger`,
                    moveclass: `btn btn-success`,
                },
                {
                    id: 5,
                    status: "Cancelled/Deleted",
                    name: "Cancel",
                    btnclass: `btn btn-outline-danger`,
                    badgeclass: `badge bg-danger`,
                    backclass: `btn btn-danger`,
                    moveclass: `btn btn-warning`,
                }
            ],
        })

        // initialize
        statuslevelfilter.Initialize()

    </script>

}
